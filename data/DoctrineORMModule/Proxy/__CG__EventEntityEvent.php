<?php

namespace DoctrineORMModule\Proxy\__CG__\Event\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Event extends \Event\Entity\Event implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', 'id', 'fullname', 'user', 'reviewedby', 'eventtitle', 'company', 'position', 'address', 'contact', 'purpose', 'venue', 'notes', 'concerns', 'status', 'borrows', 'startofevent', 'endofevent', 'datecreated', 'report');
        }

        return array('__isInitialized__', 'id', 'fullname', 'user', 'reviewedby', 'eventtitle', 'company', 'position', 'address', 'contact', 'purpose', 'venue', 'notes', 'concerns', 'status', 'borrows', 'startofevent', 'endofevent', 'datecreated', 'report');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Event $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getFullName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFullName', array());

        return parent::getFullName();
    }

    /**
     * {@inheritDoc}
     */
    public function setFullName($fullname)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFullName', array($fullname));

        return parent::setFullName($fullname);
    }

    /**
     * {@inheritDoc}
     */
    public function getReport()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getReport', array());

        return parent::getReport();
    }

    /**
     * {@inheritDoc}
     */
    public function setReport($report)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setReport', array($report));

        return parent::setReport($report);
    }

    /**
     * {@inheritDoc}
     */
    public function getUser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUser', array());

        return parent::getUser();
    }

    /**
     * {@inheritDoc}
     */
    public function setUser(\Event\Entity\User $user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUser', array($user));

        return parent::setUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function getEventTitle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEventTitle', array());

        return parent::getEventTitle();
    }

    /**
     * {@inheritDoc}
     */
    public function setEventTitle($eventtitle)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEventTitle', array($eventtitle));

        return parent::setEventTitle($eventtitle);
    }

    /**
     * {@inheritDoc}
     */
    public function getCompany()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCompany', array());

        return parent::getCompany();
    }

    /**
     * {@inheritDoc}
     */
    public function setCompany($company)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCompany', array($company));

        return parent::setCompany($company);
    }

    /**
     * {@inheritDoc}
     */
    public function getPosition()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPosition', array());

        return parent::getPosition();
    }

    /**
     * {@inheritDoc}
     */
    public function setPosition($position)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPosition', array($position));

        return parent::setPosition($position);
    }

    /**
     * {@inheritDoc}
     */
    public function getAddress()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAddress', array());

        return parent::getAddress();
    }

    /**
     * {@inheritDoc}
     */
    public function setAddress($address)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAddress', array($address));

        return parent::setAddress($address);
    }

    /**
     * {@inheritDoc}
     */
    public function getContact()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getContact', array());

        return parent::getContact();
    }

    /**
     * {@inheritDoc}
     */
    public function setContact($contact)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setContact', array($contact));

        return parent::setContact($contact);
    }

    /**
     * {@inheritDoc}
     */
    public function getPurpose()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPurpose', array());

        return parent::getPurpose();
    }

    /**
     * {@inheritDoc}
     */
    public function setPurpose($purpose)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPurpose', array($purpose));

        return parent::setPurpose($purpose);
    }

    /**
     * {@inheritDoc}
     */
    public function getVenue()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVenue', array());

        return parent::getVenue();
    }

    /**
     * {@inheritDoc}
     */
    public function setVenue($venue)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setVenue', array($venue));

        return parent::setVenue($venue);
    }

    /**
     * {@inheritDoc}
     */
    public function getNotes()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNotes', array());

        return parent::getNotes();
    }

    /**
     * {@inheritDoc}
     */
    public function setNotes($notes)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNotes', array($notes));

        return parent::setNotes($notes);
    }

    /**
     * {@inheritDoc}
     */
    public function getStatus()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatus', array());

        return parent::getStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function setStatus($status)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatus', array($status));

        return parent::setStatus($status);
    }

    /**
     * {@inheritDoc}
     */
    public function getConcerns()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getConcerns', array());

        return parent::getConcerns();
    }

    /**
     * {@inheritDoc}
     */
    public function setConcerns($concerns)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setConcerns', array($concerns));

        return parent::setConcerns($concerns);
    }

    /**
     * {@inheritDoc}
     */
    public function getReviewedBy()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getReviewedBy', array());

        return parent::getReviewedBy();
    }

    /**
     * {@inheritDoc}
     */
    public function setReviewedBy($reviewedby)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setReviewedBy', array($reviewedby));

        return parent::setReviewedBy($reviewedby);
    }

    /**
     * {@inheritDoc}
     */
    public function addBorrows(\Doctrine\Common\Collections\Collection $borrows)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addBorrows', array($borrows));

        return parent::addBorrows($borrows);
    }

    /**
     * {@inheritDoc}
     */
    public function removeBorrows(\Doctrine\Common\Collections\Collection $borrows)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeBorrows', array($borrows));

        return parent::removeBorrows($borrows);
    }

    /**
     * {@inheritDoc}
     */
    public function getBorrows()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBorrows', array());

        return parent::getBorrows();
    }

    /**
     * {@inheritDoc}
     */
    public function removeBorrow(\Event\Entity\InventoryRequest $borrow)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeBorrow', array($borrow));

        return parent::removeBorrow($borrow);
    }

    /**
     * {@inheritDoc}
     */
    public function getStartOfEvent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStartOfEvent', array());

        return parent::getStartOfEvent();
    }

    /**
     * {@inheritDoc}
     */
    public function setStartOfEvent(\DateTime $date)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStartOfEvent', array($date));

        return parent::setStartOfEvent($date);
    }

    /**
     * {@inheritDoc}
     */
    public function getEndOfEvent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEndOfEvent', array());

        return parent::getEndOfEvent();
    }

    /**
     * {@inheritDoc}
     */
    public function setEndOfEvent(\DateTime $date)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEndOfEvent', array($date));

        return parent::setEndOfEvent($date);
    }

    /**
     * {@inheritDoc}
     */
    public function getDateCreated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateCreated', array());

        return parent::getDateCreated();
    }

    /**
     * {@inheritDoc}
     */
    public function setDateCreated(\DateTime $date)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateCreated', array($date));

        return parent::setDateCreated($date);
    }

    /**
     * {@inheritDoc}
     */
    public function exchangeArray($data)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'exchangeArray', array($data));

        return parent::exchangeArray($data);
    }

    /**
     * {@inheritDoc}
     */
    public function getArrayCopy()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getArrayCopy', array());

        return parent::getArrayCopy();
    }

}
